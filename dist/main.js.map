{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/actions/current-conditions.actions.ts","webpack:///./src/app/actions/forecast.actions.ts","webpack:///./src/app/actions/zipcode.actions.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routing.ts","webpack:///./src/app/current-conditions/current-conditions.component.css","webpack:///./src/app/current-conditions/current-conditions.component.html","webpack:///./src/app/current-conditions/current-conditions.component.ts","webpack:///./src/app/effects/current-conditions.effects.ts","webpack:///./src/app/effects/forecast.effects.ts","webpack:///./src/app/forecasts-list/forecasts-list.component.css","webpack:///./src/app/forecasts-list/forecasts-list.component.html","webpack:///./src/app/forecasts-list/forecasts-list.component.ts","webpack:///./src/app/main-page/main-page.component.html","webpack:///./src/app/main-page/main-page.component.ts","webpack:///./src/app/reducers/current-conditions.reducer.ts","webpack:///./src/app/reducers/forecast.reducer.ts","webpack:///./src/app/reducers/index.ts","webpack:///./src/app/reducers/zip-codes.reducer.ts","webpack:///./src/app/services/location.service.ts","webpack:///./src/app/services/weather.service.ts","webpack:///./src/app/zipcode-entry/zipcode-entry.component.html","webpack:///./src/app/zipcode-entry/zipcode-entry.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Action } from '@ngrx/store';\n\nexport enum CurrentConditionsActionTypes {\n    CurrentConditionsLoaded = '[CurrentConditions] CurrentConditions Loaded',\n    CurrentConditionsLoadFailed = '[CurrentConditions] CurrentConditions Load Failded'\n}\n\nexport class CurrentConditionsLoaded implements Action {\n    readonly type = CurrentConditionsActionTypes.CurrentConditionsLoaded;\n\n    constructor(public zipcode: string, public conditions: any){}\n}\n\nexport class CurrentConditionsLoadFailed implements Action {\n    readonly type = CurrentConditionsActionTypes.CurrentConditionsLoadFailed;\n\n    constructor(public zipcode: string, public error: any){}\n}\n\nexport type CurrentConditionsActions = CurrentConditionsLoaded | CurrentConditionsLoadFailed;","import { Action } from '@ngrx/store';\n\nexport enum ForecastActionTypes {\n    ForecastLoaded = '[Forecast] Forecast Loaded',\n    ForecastLoadFailed = '[Forecast] Forecast Load Failded'\n}\n\nexport class ForecastLoaded implements Action {\n    readonly type = ForecastActionTypes.ForecastLoaded;\n\n    constructor(public forecast: any){}\n}\n\nexport class ForecastLoadFailed implements Action {\n    readonly type = ForecastActionTypes.ForecastLoadFailed;\n\n    constructor(public zipcode: string, public error: any){}\n}\n\nexport type ForecastActions = ForecastLoaded | ForecastLoadFailed;\n","import { Action } from '@ngrx/store';\n\nexport enum ZipcodeActionTypes {\n    AddZipcode = '[Zipcode] Add Zipcode',\n    RemoveZipcode = '[Zipcode] Remove Zipcode'\n}\n\nexport class AddZipcode implements Action {\n    readonly type = ZipcodeActionTypes.AddZipcode;\n    constructor(public zipcode: string){}\n}\n\nexport class RemoveZipcode implements Action {\n    readonly type = ZipcodeActionTypes.RemoveZipcode;\n    constructor(public zipcode: string){}\n}\n\n\nexport type ZipcodeActions = AddZipcode | RemoveZipcode;\n","module.exports = \"\"","module.exports = \"<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app works!';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { ZipcodeEntryComponent } from './zipcode-entry/zipcode-entry.component';\nimport {LocationService} from \"./services/location.service\";\nimport { ForecastsListComponent } from './forecasts-list/forecasts-list.component';\nimport {WeatherService} from \"./services/weather.service\";\nimport { CurrentConditionsComponent } from './current-conditions/current-conditions.component';\nimport { MainPageComponent } from './main-page/main-page.component';\nimport {RouterModule} from \"@angular/router\";\nimport {routing} from \"./app.routing\";\nimport {HttpClientModule} from \"@angular/common/http\";\nimport { StoreModule } from '@ngrx/store';\nimport { reducers, metaReducers } from './reducers';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { environment } from '../environments/environment';\nimport { EffectsModule } from '@ngrx/effects';\nimport { CurrentConditionsEffects } from './effects/current-conditions.effects';\nimport {StoreRouterConnectingModule} from '@ngrx/router-store';\nimport {ForecastEffects} from './effects/forecast.effects';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ZipcodeEntryComponent,\n    ForecastsListComponent,\n    CurrentConditionsComponent,\n    MainPageComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule,\n    RouterModule,\n    routing,\n    EffectsModule.forRoot([CurrentConditionsEffects, ForecastEffects]),\n    StoreModule.forRoot(reducers, { metaReducers }),\n    !environment.production ? StoreDevtoolsModule.instrument() : [],\n    StoreRouterConnectingModule.forRoot({stateKey: 'router'})\n  ],\n  providers: [LocationService, WeatherService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { ModuleWithProviders }  from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {ForecastsListComponent} from \"./forecasts-list/forecasts-list.component\";\nimport {MainPageComponent} from \"./main-page/main-page.component\";\n\nconst appRoutes: Routes = [\n  {\n    path: '', component: MainPageComponent\n  },\n  {\n    path: 'forecast/:zipcode', component: ForecastsListComponent\n  }\n];\nexport const routing: ModuleWithProviders = RouterModule.forRoot(appRoutes);\n","module.exports = \".close {\\n  cursor: pointer;\\n}\\n.flex {\\n  display: flex;\\n  justify-content: space-between;\\n}\\n\"","module.exports = \"<div>\\n  <div *ngFor=\\\"let zip  of zipcodes\\\" class=\\\"well flex\\\" (click)=\\\"showForecast(zip)\\\">\\n    <div>\\n      <h3>{{getConditions(zip)?.name}} ({{zip}})</h3>\\n      <h4>Current conditions: {{getConditions(zip)?.weather[0].main}}</h4>\\n      <h4>Temperatures today:</h4>\\n      <p>\\n        Current {{getConditions(zip)?.main.temp | number:'.0-0'}}\\n        - Max {{getConditions(zip)?.main.temp_max | number:'.0-0'}}\\n        - Min {{getConditions(zip)?.main.temp_min | number:'.0-0'}}\\n      </p>\\n      <p>\\n        <a [routerLink]=\\\"['/forecast', zip]\\\" >Show 5-day forecast for {{getConditions(zip)?.name}}</a>\\n      </p>\\n    </div>\\n    <div>\\n      <span class=\\\"close\\\" (click)=\\\"zipRemoved.emit(zip)\\\">&times;</span>\\n      <img [src]=\\\"weatherService.getWeatherIcon(getConditions(zip)?.weather[0].id)\\\">\\n    </div>\\n  </div>\\n</div>\"","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {WeatherService} from '../services/weather.service';\n\n@Component({\n  selector: 'app-current-conditions',\n  templateUrl: './current-conditions.component.html',\n  styleUrls: ['./current-conditions.component.css']\n})\nexport class CurrentConditionsComponent {\n\n    @Input()\n    zipcodes: Array<String>;\n    @Input()\n    currentConditions: Map<string, any>;\n    @Output()\n    zipRemoved = new EventEmitter<string>();\n\n    constructor(public weatherService: WeatherService){ }\n\n    getConditions(zip: string) {\n        return this.currentConditions.get(zip);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport {Observable, of} from 'rxjs';\nimport {mergeMap, catchError, map} from 'rxjs/operators';\nimport {AddZipcode, ZipcodeActionTypes} from '../actions/zipcode.actions';\nimport {WeatherService} from '../services/weather.service';\nimport {CurrentConditionsLoaded, CurrentConditionsLoadFailed} from '../actions/current-conditions.actions';\n\n\n@Injectable()\nexport class CurrentConditionsEffects {\n\n    @Effect()\n    loadCurrentConditions$: Observable<any> = this.actions$.pipe(\n        ofType(ZipcodeActionTypes.AddZipcode),\n        mergeMap(action =>\n            this.weatherService.loadCurrentConditions(action['zipcode']).pipe(\n                // If successful, dispatch success action with result\n                map(data => new CurrentConditionsLoaded(action['zipcode'], data)),\n                // If request fails, dispatch failed action\n                catchError((err) => of(new CurrentConditionsLoadFailed(action['zipcode'], err)))\n            )\n        )\n    );\n\n    constructor(private actions$: Actions<AddZipcode>, private weatherService: WeatherService) {}\n}","import { Injectable } from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {Observable, of} from 'rxjs/index';\nimport {catchError, map, mergeMap, filter} from 'rxjs/operators';\nimport {WeatherService} from '../services/weather.service';\nimport {ROUTER_NAVIGATION, RouterNavigationAction} from '@ngrx/router-store';\nimport {ForecastLoaded, ForecastLoadFailed} from '../actions/forecast.actions';\n\n@Injectable()\nexport class ForecastEffects {\n\n    @Effect()\n    loadCurrentConditions$: Observable<any> = this.actions$.pipe(\n        ofType<RouterNavigationAction>(ROUTER_NAVIGATION),\n        filter(action => action.payload.event.url.startsWith('/forecast')),\n        mergeMap(action => {\n              let zipcode = action.payload.event.url.split('/').pop();\n              return this.weatherService.getForecast(zipcode).pipe(\n                  // If successful, dispatch success action with result\n                  map(data => new ForecastLoaded(data)),\n                  // If request fails, dispatch failed action\n                  catchError((err) => of(new ForecastLoadFailed(zipcode, err)))\n              )\n            }\n        )\n    );\n\n    constructor(private actions$: Actions<RouterNavigationAction>, private weatherService: WeatherService) {}\n}\n","module.exports = \".icon {\\n  width: 45px;\\n  height: 45px;\\n  position: absolute;\\n  right: 20px;\\n  top: -2px;\\n}\\n\"","module.exports = \"<div>\\n  <div class=\\\"panel panel-default\\\">\\n    <div class=\\\"panel-heading\\\">\\n      <h3 class=\\\"panel-title\\\">5-day forecast for {{forecast?.city.name}}</h3>\\n\\n    </div>\\n    <ul class=\\\"list-group\\\">\\n      <li *ngFor=\\\"let dailyForecast of forecast?.list\\\" class=\\\"list-group-item\\\">\\n        {{ (dailyForecast.dt * 1000) | date:'EEEE, MMM d'}}:\\n        {{dailyForecast.weather[0].main}}\\n        - Min: {{dailyForecast.temp.min | number:'.0-0'}}\\n        - Max: {{dailyForecast.temp.max | number:'.0-0'}}\\n\\n        <img [src]=\\\"weatherService.getWeatherIcon(dailyForecast.weather[0].id)\\\" class=\\\"icon\\\">\\n      </li>\\n    </ul>\\n  </div>\\n</div>\\n<button class=\\\"btn btn-success\\\" [routerLink]=\\\"'/'\\\" >< Back to main page</button>\\n\"","import { Component } from '@angular/core';\nimport {WeatherService} from '../services/weather.service';\nimport {Store} from '@ngrx/store';\nimport {selectForecast, State} from '../reducers';\n\n@Component({\n  selector: 'app-forecasts-list',\n  templateUrl: './forecasts-list.component.html',\n  styleUrls: ['./forecasts-list.component.css']\n})\nexport class ForecastsListComponent {\n\n    forecast: any;\n\n    constructor(private store: Store<State>, public weatherService: WeatherService) {\n        store.select(selectForecast).subscribe((fcast) => this.forecast = fcast);\n    }\n}\n","module.exports = \"\\nAngular NGRX Starter Template\\n\\n<div class=\\\"container-fluid\\\">\\n\\n  <app-zipcode-entry (zipAdded)=\\\"addLocation($event)\\\"> </app-zipcode-entry>\\n  <app-current-conditions [zipcodes]=\\\"zipcodes\\\" [currentConditions]=\\\"currentConditions\\\" (zipRemoved)=\\\"removeZip($event)\\\">\\n\\n  </app-current-conditions>\\n</div>\\n\"","import { Component } from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {AddZipcode, RemoveZipcode} from '../actions/zipcode.actions';\nimport {selectCurrentConditionsList, selectZipcodeList, State} from '../reducers';\nimport {WeatherService} from '../services/weather.service';\n\n@Component({\n  selector: 'app-main-page',\n  templateUrl: './main-page.component.html'\n})\nexport class MainPageComponent {\n\n    zipcodes: Array<string>;\n\n    currentConditions: Map<string, any>;\n\n    constructor(private store: Store<State>, public weatherService: WeatherService) {\n        store.select(selectZipcodeList)\n            .subscribe(zips => this.zipcodes = zips);\n\n        store.select(selectCurrentConditionsList)\n            .subscribe(conditions => this.currentConditions = conditions);\n    }\n\n    addLocation(zipcode : string){\n        this.store.dispatch(new AddZipcode(zipcode));\n    }\n\n    removeZip(zip: string) {\n        this.store.dispatch(new RemoveZipcode(zip));\n    }\n}\n","import {CurrentConditionsActions, CurrentConditionsActionTypes} from '../actions/current-conditions.actions';\n\n\nexport interface CurrentConditionsState {\n    currentConditions: Map<string, any>;\n}\n\nexport const initialState: CurrentConditionsState = {\n    currentConditions: new Map()\n};\n\nexport function currentConditionsReducer(state = initialState, action: CurrentConditionsActions): CurrentConditionsState {\n    switch (action.type) {\n        \n        case CurrentConditionsActionTypes.CurrentConditionsLoaded:\n            const cc = new Map(state.currentConditions);\n            cc.set(action.zipcode, action.conditions);\n            return {...state, currentConditions: cc};\n        default:\n            return state;\n    }\n}","import {ForecastActions, ForecastActionTypes} from '../actions/forecast.actions';\n\nexport interface ForecastState {\n  forecast: any;\n}\n\nexport const initialState: ForecastState = {\n    forecast: {}\n};\n\nexport function forecastReducer(state = initialState, action: ForecastActions): ForecastState {\n  switch (action.type) {\n    case ForecastActionTypes.ForecastLoaded:\n        return {...state, forecast: action.forecast};\n    default:\n      return state;\n  }\n}\n","import {\n  ActionReducer,\n  ActionReducerMap,\n  createFeatureSelector,\n  createSelector,\n  MetaReducer\n} from '@ngrx/store';\nimport { environment } from '../../environments/environment';\nimport {zipcodeReducer, ZipcodeState} from './zip-codes.reducer';\nimport {currentConditionsReducer, CurrentConditionsState} from './current-conditions.reducer';\nimport {routerReducer, RouterReducerState} from '@ngrx/router-store';\nimport {forecastReducer, ForecastState} from './forecast.reducer';\n\nexport interface State {\n  zipcodes: ZipcodeState,\n  currentConditions: CurrentConditionsState\n  router: RouterReducerState,\n  forecast: ForecastState\n}\n\nexport const reducers: ActionReducerMap<State> = {\n  zipcodes: zipcodeReducer,\n  currentConditions: currentConditionsReducer,\n  router: routerReducer,\n  forecast: forecastReducer\n};\n\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\n\nexport const selectZipcodeState = (state: State) => state.zipcodes;\n\nexport const selectZipcodeList = createSelector(selectZipcodeState, (state: ZipcodeState) => state.zipcodes);\n\nexport const selectCurrentConditionsState = (state: State) => state.currentConditions;\n\nexport const selectCurrentConditionsList = createSelector(selectCurrentConditionsState, (state: CurrentConditionsState) => state.currentConditions);\n\nexport const selectForecastState = (state: State) => state.forecast;\n\nexport const selectForecast = createSelector(selectForecastState,\n    (state: ForecastState) => state.forecast);","import {ZipcodeActions, ZipcodeActionTypes} from '../actions/zipcode.actions';\n\n\nexport interface ZipcodeState {\n    zipcodes: Array<string>\n}\n\nexport const initialState: ZipcodeState = {\n    zipcodes: []\n};\n\nexport function zipcodeReducer(state = initialState, action: ZipcodeActions): ZipcodeState {\n  switch (action.type) {\n      case ZipcodeActionTypes.AddZipcode:\n        return {...state, zipcodes: [...state.zipcodes, action.zipcode]};\n      case ZipcodeActionTypes.RemoveZipcode:\n          return {...state, zipcodes: state.zipcodes.filter( item => item !== action.zipcode)};\n      default:\n      return state;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {WeatherService} from \"./weather.service\";\n\nexport const LOCATIONS : string = \"locations\";\n\n@Injectable()\nexport class LocationService {\n\n  locations : string[] = [];\n\n  constructor() {\n\n  }\n\n  addLocation(zipcode : string){\n    this.locations.push(zipcode);\n  }\n\n  removeLocation(zipcode : string){\n    let index = this.locations.indexOf(zipcode);\n    if (index !== -1){\n      this.locations.splice(index, 1);\n    }\n  }\n\n  getLocations() : string[]{\n    return this.locations;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpClient} from '@angular/common/http';\n\n@Injectable()\nexport class WeatherService {\n\n  static URL = 'http://api.openweathermap.org/data/2.5';\n  static APPID = '5a4b2d457ecbef9eb2a71e480b947604';\n  static ICON_URL = 'https://raw.githubusercontent.com/udacity/Sunshine-Version-2/sunshine_master/app/src/main/res/drawable-hdpi/';\n  private currentConditions = [];\n\n  constructor(private http: HttpClient) { }\n\n  loadCurrentConditions(zipcode: string): Observable<any> {\n    // Here we make a request to get the curretn conditions data from the API. Note the use of backticks and an expression to insert the zipcode\n    return this.http.get(`${WeatherService.URL}/weather?zip=${zipcode},us&units=imperial&APPID=${WeatherService.APPID}`);\n  }\n\n  removeCurrentConditions(zipcode: string) {\n    for (let i in this.currentConditions){\n      if (this.currentConditions[i].zip == zipcode)\n        this.currentConditions.splice(+i, 1);\n    }\n  }\n\n  getCurrentConditions(): any[] {\n    return this.currentConditions;\n  }\n\n  getForecast(zipcode: string): Observable<any> {\n    // Here we make a request to get the forecast data from the API. Note the use of backticks and an expression to insert the zipcode\n    return this.http.get(`${WeatherService.URL}/forecast/daily?zip=${zipcode},us&units=imperial&cnt=5&APPID=${WeatherService.APPID}`);\n\n  }\n\n  getWeatherIcon(id){\n    if (id >= 200 && id <= 232)\n      return WeatherService.ICON_URL + \"art_storm.png\";\n    else if (id >= 501 && id <= 511)\n      return WeatherService.ICON_URL + \"art_rain.png\";\n    else if (id === 500 || (id >= 520 && id <= 531))\n      return WeatherService.ICON_URL + \"art_light_rain.png\";\n    else if (id >= 600 && id <= 622)\n      return WeatherService.ICON_URL + \"art_snow.png\";\n    else if (id >= 801 && id <= 804)\n      return WeatherService.ICON_URL + \"art_clouds.png\";\n    else if (id === 741 || id === 761)\n      return WeatherService.ICON_URL + \"art_fog.png\";\n    else\n      return WeatherService.ICON_URL + \"art_clear.png\";\n  }\n\n}\n","module.exports = \"<div class=\\\"well\\\">\\n  <h2>Enter a zipcode:</h2>\\n  <input type=\\\"text\\\" #zipcode placeholder=\\\"Zipcode\\\" class=\\\"form-control\\\">\\n  <br>\\n  <button class=\\\"btn btn-primary\\\" (click)=\\\"zipAdded.emit(zipcode.value)\\\" >\\n    Add location\\n  </button>\\n</div>\\n\"","import {Component, EventEmitter, Output} from '@angular/core';\n\n@Component({\n  selector: 'app-zipcode-entry',\n  templateUrl: './zipcode-entry.component.html'\n})\nexport class ZipcodeEntryComponent {\n\n    @Output()\n    zipAdded = new EventEmitter<string>();\n\n\n}\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n"],"sourceRoot":""}